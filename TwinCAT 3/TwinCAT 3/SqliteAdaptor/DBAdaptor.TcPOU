<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.36">
  <POU Name="DBAdaptor" Id="{abccab33-d3de-45b2-a197-271df6c757eb}" SpecialFunc="None">
    <Declaration><![CDATA[//{attribute 'hide_all_locals'}
FUNCTION_BLOCK PUBLIC DBAdaptor IMPLEMENTS ITF_DBAdaptor
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	Database_Id	: UDINT := 0;
	sAmsNetId	: STRING(23) := '';
	tTimeOut	: TIME := T#1S;
	fbOpenConn	: FB_DBConnectionOpen;
	fbCloseConn	: FB_DBConnectionClose;
	fbAddConn	: FB_DBConnectionAdd;
	fbSqlDelete : FB_DBRecordDelete;
	fbSqlInsert : FB_DBRecordInsert_EX;
	fbSqlSelect : FB_DBRecordArraySelect;
	dbState 	: DB_State := DB_Idle;
	isOpened	: BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[;]]></ST>
    </Implementation>
    <Method Name="Close" Id="{090301b5-d7a0-4c7e-83a9-c565563887ff}">
      <Declaration><![CDATA[{attribute 'object_name' := 'Close'}
METHOD PRIVATE Close : DB_FunctionResult
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF isOpened THEN
	fbCloseConn(
		sNetID:= sAmsNetID, 
		hDBID:= Database_ID, 
		bExecute:= TRUE, 
		tTimeout:= tTimeOut );
	IF fbCloseConn.bBusy OR fbCloseConn.bError THEN 
		IF fbCloseConn.bError THEN 
			Close := DB_FunctionResult.DB_Error;
			fbCloseConn(
				sNetID:= sAmsNetId, 
				hDBID:= Database_ID, 
				bExecute:= FALSE, 
				tTimeout:= tTimeOut );
		END_IF
		IF fbCloseConn.bBusy THEN 
			Close := DB_FunctionResult.DB_Busy;
		END_IF
	ELSE
		fbCloseConn(
			sNetID:= sAmsNetId, 
			hDBID:= Database_ID, 
			bExecute:= FALSE, 
			tTimeout:= tTimeOut );
		isOpened := FALSE;
		Close := DB_FunctionResult.DB_Ok;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SQL_Delete" Id="{14ba833c-692c-4c6b-bf26-b30e6177eab6}">
      <Declaration><![CDATA[{attribute 'object_name' := 'SQL_Delete'}
METHOD SQL_Delete : DB_FunctionResult
VAR_INPUT
	SQL : STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbSqlDelete(
	sNetID:= sAmsNetId, 
	hDBID:= Database_Id, 
	pCmdAddr:= ADR(SQL), 
	cbCmdSize:= SIZEOF(SQL), 
	bExecute:= TRUE, 
	tTimeout:= tTimeOut );
IF fbSqlDelete.bBusy OR fbSqlDelete.bError THEN
	IF fbSqlDelete.bError THEN
		fbSqlDelete(
			sNetID:= sAmsNetId, 
			hDBID:= Database_Id, 
			pCmdAddr:= ADR(SQL), 
			cbCmdSize:= SIZEOF(SQL), 
			bExecute:= FALSE, 
			tTimeout:= tTimeOut );
		SQL_Delete := DB_FunctionResult.DB_Error;
	END_IF
	IF fbSqlDelete.bBusy THEN
		SQL_Delete := DB_FunctionResult.DB_Busy;
	END_IF
ELSE
	fbSqlDelete(
		sNetID:= sAmsNetId, 
		hDBID:= Database_Id, 
		pCmdAddr:= ADR(SQL), 
		cbCmdSize:= SIZEOF(SQL), 
		bExecute:= FALSE, 
		tTimeout:= tTimeOut );
	SQL_Delete := DB_FunctionResult.DB_Ok;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="sNetID" Id="{4cefc892-7388-4919-a6ab-42003f7a4774}">
      <Declaration><![CDATA[PROPERTY sNetID : STRING(23)
]]></Declaration>
      <Set Name="Set" Id="{9106b61e-84d0-44b0-bbef-1a3f3f8612d6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sAmsNetId := sNetID;]]></ST>
        </Implementation>
      </Set>
      <Get Name="Get" Id="{f4a37a04-4438-4060-96b3-e00de1762898}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sNetId := sAmsNetID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SQL_Insert" Id="{813d7971-78c7-4d45-8f56-becb63644dad}">
      <Declaration><![CDATA[{attribute 'object_name' := 'SQL_Insert'}
METHOD SQL_Insert : DB_FunctionResult
VAR_INPUT
	SQL : STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbSqlInsert(
	sNetID:= sAmsNetId, 
	hDBID:= Database_Id, 
	pCmdAddr:= ADR(SQL), 
	cbCmdSize:= SIZEOF(SQL), 
	bExecute:= TRUE, 
	tTimeout:= tTimeOut );
IF fbSqlInsert.bBusy OR fbSqlInsert.bError THEN
	IF fbSqlInsert.bError THEN
		fbSqlInsert(
			sNetID:= sAmsNetId, 
			hDBID:= Database_Id, 
			pCmdAddr:= ADR(SQL), 
			cbCmdSize:= SIZEOF(SQL), 
			bExecute:= FALSE, 
			tTimeout:= tTimeOut );
		SQL_Insert := DB_FunctionResult.DB_Error;
	END_IF
	IF fbSqlInsert.bBusy THEN
		SQL_Insert := DB_FunctionResult.DB_Busy;
	END_IF
ELSE
	fbSqlInsert(
		sNetID:= sAmsNetId, 
		hDBID:= Database_Id, 
		pCmdAddr:= ADR(SQL), 
		cbCmdSize:= SIZEOF(SQL), 
		bExecute:= FALSE, 
		tTimeout:= tTimeOut );
	SQL_Insert := DB_FunctionResult.DB_Ok;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SQL_Select" Id="{878a5881-e6d5-4326-bd4d-c9c7cade3cd3}">
      <Declaration><![CDATA[{attribute 'object_name' := 'SQL_Select'}
METHOD SQL_Select : DB_FunctionResult
VAR_INPUT
	SQL 				: STRING(255);
	START_INDEX			: UDINT;
	ROWS				: UDINT;
	ROW_DATA_SIZE		: UDINT;
	ptr_ReceiveBuffer	: POINTER TO BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbSqlSelect(
	sNetID:= sAmsNetId, 
	hDBID:= Database_ID, 
	pCmdAddr:= ADR(SQL), 
	cbCmdSize:= SIZEOF(SQL), 
	nStartIndex:= START_INDEX, 
	nRecordCount:= ROWS, 
	pDestAddr:= ptr_ReceiveBuffer, 
	cbRecordArraySize:= ROW_DATA_SIZE, 
	bExecute:= TRUE, 
	tTimeout:= tTimeOut );
IF fbSqlSelect.bBusy OR fbSqlSelect.bError THEN
	IF fbSqlSelect.bError THEN
		fbSqlSelect(
			sNetID:= sAmsNetId, 
			hDBID:= Database_ID, 
			pCmdAddr:= ADR(SQL), 
			cbCmdSize:= SIZEOF(SQL), 
			nStartIndex:= START_INDEX, 
			nRecordCount:= ROWS, 
			pDestAddr:= ptr_ReceiveBuffer, 
			cbRecordArraySize:= ROW_DATA_SIZE, 
			bExecute:= TRUE, 
			tTimeout:= tTimeOut );
		SQL_Select := DB_FunctionResult.DB_Error;
	END_IF
	IF fbSqlSelect.bBusy THEN
		SQL_Select := DB_FunctionResult.DB_Busy;
	END_IF
ELSE
	fbSqlSelect(
		sNetID:= sAmsNetId, 
		hDBID:= Database_ID, 
		pCmdAddr:= ADR(SQL), 
		cbCmdSize:= SIZEOF(SQL), 
		nStartIndex:= START_INDEX, 
		nRecordCount:= ROWS, 
		pDestAddr:= ptr_ReceiveBuffer, 
		cbRecordArraySize:= ROW_DATA_SIZE, 
		bExecute:= FALSE, 
		tTimeout:= tTimeOut );
	SQL_Select := DB_FunctionResult.DB_Ok;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Open" Id="{98cf4f32-e65d-4442-aa7e-5703dadb3f78}">
      <Declaration><![CDATA[{attribute 'object_name' := 'Open'}
METHOD PRIVATE Open : DB_FunctionResult
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT isOpened THEN
	fbOpenConn(
		sNetID:= sAmsNetId, 
		hDBID:= Database_ID, 
		bExecute:= TRUE, 
		tTimeout:= tTimeOut );
	IF fbOpenConn.bBusy OR fbOpenConn.bError THEN 
		IF fbOpenConn.bError THEN 
			Open := DB_FunctionResult.DB_Error;
			fbOpenConn(
				sNetID:= sAmsNetId, 
				hDBID:= Database_ID, 
				bExecute:= FALSE, 
				tTimeout:= tTimeOut );
		END_IF
		IF fbOpenConn.bBusy THEN 
			Open := DB_FunctionResult.DB_Busy;
		END_IF
		
	ELSE
		fbOpenConn(
			sNetID:= sAmsNetId, 
			hDBID:= Database_ID, 
			bExecute:= FALSE, 
			tTimeout:= tTimeOut );
		isOpened := TRUE;
		Open := DB_FunctionResult.DB_Ok;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="udiDatabase_ID" Id="{c69aa44a-16c2-47d9-87cb-f0a1f1744985}">
      <Declaration><![CDATA[PROPERTY udiDatabase_ID : UDINT
]]></Declaration>
      <Set Name="Set" Id="{6dbb0e79-b957-44b0-94f0-601aaa3e237a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Database_ID := udiDatabase_Id;]]></ST>
        </Implementation>
      </Set>
      <Get Name="Get" Id="{f5b7895b-2f3f-4351-bfc4-a87831dd3a83}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[udiDatabase_ID := Database_Id;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="TimeOut" Id="{e714d72f-15b2-42b7-bd8d-0287408d9a43}">
      <Declaration><![CDATA[PROPERTY TimeOut : TIME
]]></Declaration>
      <Get Name="Get" Id="{0aa313e0-09b3-4dfd-8325-becba9fb2057}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TimeOut := tTimeOut;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{4911bcf8-c03d-4056-a48b-b3ec1b70e513}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[tTimeOut := TimeOut;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>