<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.3">
  <POU Name="C_HTTPSTREAM" Id="{7c16235b-b95d-4166-b859-a2620374b873}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK C_HTTPSTREAM IMPLEMENTS I_STREAM
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_BASE_MEM : POINTER TO BYTE;
	_BASE_SIZE: UDINT;
	
	_STREAM_POSITION : UDINT := 0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{b3bcbe25-e43e-41e6-bc09-d035f3d7a5ec}" />
    <Folder Name="Properties" Id="{07aba658-8247-40a8-b20c-93907acd2e24}" />
    <Property Name="BufferSize" Id="{1d7a97af-8e07-4e9c-bc16-85dcd3c18803}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY BufferSize : UDINT]]></Declaration>
      <Get Name="Get" Id="{ea474f8b-c82e-4a09-97de-ff36eef49b71}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Close" Id="{9c1fc426-538a-43f6-805e-b19cc744c1a5}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Close : DINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_BASE_MEM := 0;
_BASE_SIZE:= 0;
_STREAM_POSITION := 0;
Close := -1;
RETURN;]]></ST>
      </Implementation>
    </Method>
    <Property Name="EndOfStream" Id="{b5bb5cc0-ec2a-4895-b323-d1d1a93b573c}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY EndOfStream : BOOL]]></Declaration>
      <Get Name="Get" Id="{ebc283fd-5844-406f-83c0-275ed0299c6b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[EndOfStream := _STREAM_POSITION >= _BASE_SIZE; ]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FIND" Id="{943831ea-7897-4a75-bd64-cb364118e9b2}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD FIND : DINT
VAR_INPUT
	CHARACTER	: POINTER TO BYTE;
	CHAR_LEN	: UDINT;
	OFFSET 		: POINTER TO UDINT;
END_VAR
VAR
	i 		: UDINT;
	_offset : UDINT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF CHARACTER = 0 OR CHAR_LEN = 0 OR OFFSET = 0 THEN
	FIND := 1;
	RETURN;
END_IF

FOR i := _STREAM_POSITION TO (_BASE_SIZE - CHAR_LEN) BY 1 DO
	IF MEMCMP(_BASE_MEM + i, CHARACTER, CHAR_LEN) = 0 THEN
		OFFSET^ := _offset;
		FIND := -1;
		RETURN;
	END_IF
	_offset := _offset + 1;
END_FOR

FIND := 2;
RETURN;]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsValid" Id="{f896de43-803f-499c-aaca-2142527d1885}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY IsValid : BOOL]]></Declaration>
      <Get Name="Get" Id="{0df8cbb2-01db-4181-8289-bd98703c3c6c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsValid := _BASE_MEM <> 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="NEW" Id="{73b9ae6f-d91f-4d5a-9926-7c799eeaa686}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD NEW : DINT
VAR_INPUT
	PTR_BASE	: PVOID;
	BASE_SIZE	: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF PTR_BASE = 0 OR BASE_SIZE = 0 OR IsValid THEN
	NEW := 1;
	RETURN;
ELSE
	_BASE_MEM := PTR_BASE;
	_BASE_SIZE:= BASE_SIZE;
	_STREAM_POSITION := 0;
	NEW := -1;
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Peek" Id="{cc78d78a-3223-40be-890d-25f648099c19}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Peek : DINT
VAR_INPUT
	ptr_DataOut : POINTER TO BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsValid THEN
	Peek := 1;
	RETURN;
END_IF

ptr_DataOut^ := _BASE_MEM[_STREAM_POSITION];
Peek := -1;
RETURN;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Position" Id="{7178b76e-e6ad-42fb-8663-636f56815e8d}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Position : UDINT]]></Declaration>
      <Get Name="Get" Id="{2bad5427-84b3-4be6-86eb-b2fa6ef4c9b6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Position := _STREAM_POSITION;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Read" Id="{7b24a2ee-5ccb-40e0-9d06-0f8c6d51aa9b}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Read : DINT
VAR_INPUT
	ptr_DataOut : PVOID;
	Length		: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsValid THEN
	Read := 1;
	RETURN;
END_IF

IF _STREAM_POSITION + Length > _BASE_SIZE THEN
	Read := 2;
	RETURN;
END_IF
		
MEMCPY(ptr_DataOut, _BASE_MEM + _STREAM_POSITION, Length);
_STREAM_POSITION := _STREAM_POSITION + Length;
READ := -1;
RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Seek" Id="{b8f41d78-f69c-463f-a4a6-655d17fee404}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Seek : DINT
VAR_INPUT
	Offset 		: UDINT;
	SeekStyle 	: E_STREAMSEEKTYPE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsValid THEN
	Seek := 1;
	RETURN;
END_IF

CASE SeekStyle OF
	E_STREAMSEEKTYPE.Current_Reversed:
		IF OFFSET > _STREAM_POSITION THEN
			Seek := 2;
			RETURN;
		ELSE
			_STREAM_POSITION := _STREAM_POSITION - OFFSET;
			Seek := -1;
			RETURN;
		END_IF
	E_STREAMSEEKTYPE.Current:
		IF _STREAM_POSITION + OFFSET > _BASE_SIZE THEN
			Seek := 2;
			RETURN;
		ELSE
			_STREAM_POSITION := _STREAM_POSITION + OFFSET;
			Seek := -1;
			RETURN;
		END_IF
	E_STREAMSEEKTYPE.End:
		IF OFFSET >= _BASE_SIZE THEN
			Seek := 2;
			RETURN;
		ELSE
			_STREAM_POSITION := _BASE_SIZE - Offset - 1;
			Seek := -1;
			RETURN;
		END_IF
	E_STREAMSEEKTYPE.Origin:
		IF OFFSET >= _BASE_SIZE THEN
			Seek := 2;
			RETURN;
		ELSE
			_STREAM_POSITION := Offset;
			Seek := -1;
			RETURN;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Write" Id="{f1cabee3-0d89-4ecb-9614-4d88814c0ed6}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Write : DINT
VAR_INPUT
	ptr_DataIn	: PVOID;
	Length		: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsValid THEN
	Write := 1;
	RETURN;
END_IF

IF _STREAM_POSITION + Length > _BASE_SIZE THEN
	Write := 2;
	RETURN;
END_IF
		
MEMCPY(_BASE_MEM + _STREAM_POSITION, ptr_DataIn, Length);
_STREAM_POSITION := _STREAM_POSITION + Length;
Write := -1;
RETURN;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>