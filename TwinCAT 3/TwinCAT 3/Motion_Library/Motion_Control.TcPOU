<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.36">
  <POU Name="Motion_Control" Id="{55b379f4-f721-4632-9623-aca35a4ff0b7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Motion_Control IMPLEMENTS ITF_MotionControl
VAR_INPUT
	HMI_MODE : BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	AXIS_Object : POINTER TO Motion_Object;
	HmiToPlc	: POINTER TO Motion_HmiToPlc;
	PlcToHmi	: POINTER TO Motion_PlcToHmi;
	AXIS_COUNT	: INT := 0;
	{attribute 'hide'}
	i			: INT;
	{attribute 'hide'}
	ptrPlcToHmi	: POINTER TO Motion_PlcToHmi;
	{attribute 'hide'}
	ptrHmiToPlc	: POINTER TO Motion_HmiToPlc;
	{attribute 'hide'}
	ptrAxisObj	: POINTER TO Motion_Object;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[;]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{17551b9c-2969-46ec-8e71-0b07d9c32552}" />
    <Folder Name="Properties" Id="{705af329-ccbe-4f33-b4ad-e8be6087764d}" />
    <Folder Name="HMI Actions" Id="{a81ee722-85c9-42c1-866f-016e6d583404}" />
    <Property Name="HmiToPlc_Address" Id="{04fea5c3-fc2d-45ae-8f6b-8c737924b0a6}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY HmiToPlc_Address : POINTER TO Motion_HmiToPlc
]]></Declaration>
      <Set Name="Set" Id="{de52f853-b5b9-4953-848d-3b44041cbcb0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HmiToPlc := HmiToPlc_Address;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Action Name="ACT_On" Id="{055125fe-25ee-4a7a-b050-73eb03772677}" FolderPath="HMI Actions\">
      <Implementation>
        <ST><![CDATA[On(i, HmiToPlc[i].ON_FW, HmiToPlc[i].ON_BW, HmiToPlc[i].CONTROLLER_OVERRIDE);]]></ST>
      </Implementation>
    </Action>
    <Method Name="Home" Id="{177da0d7-0e75-4752-b88f-e867267c266c}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC Home : Motion_FunctionResult
VAR_INPUT
	INDEX : INT;
END_VAR
VAR
	ptr_MotionObj : POINTER TO Motion_Object;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF INDEX > AXIS_COUNT OR INDEX < 1 THEN 
	Home := Motion_FunctionResult.MOTION_UNKNOWN_AXIS;
ELSE
	ptr_MotionObj := Axis_Object + INT_TO_DWORD(INT_TO_UINT(INDEX -1) * SIZEOF(Motion_Object));
    Home := ptr_MotionObj^.Home();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Jog_Stop" Id="{1f8fc547-a813-4b5f-93fa-9fae40058f6f}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC Jog_Stop : Motion_FunctionResult
VAR_INPUT
	INDEX : INT;
END_VAR
VAR
	ptr_MotionObj : POINTER TO Motion_Object;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF INDEX > AXIS_COUNT OR INDEX < 1 THEN 
	Jog_Stop := Motion_FunctionResult.MOTION_UNKNOWN_AXIS;
ELSE
	ptr_MotionObj := Axis_Object + INT_TO_DWORD(INT_TO_UINT(INDEX) * SIZEOF(Motion_Object));
    Jog_Stop := ptr_MotionObj^.Jog_Stop();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Off" Id="{2b7678fb-5114-4046-a0d3-11070b4fbd98}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC Off : Motion_FunctionResult
VAR_INPUT
	INDEX : INT;
END_VAR
VAR
	ptr_MotionObj : POINTER TO Motion_Object;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF INDEX > AXIS_COUNT OR INDEX < 1 THEN 
	Off := Motion_FunctionResult.MOTION_UNKNOWN_AXIS;
ELSE
	ptr_MotionObj := Axis_Object + INT_TO_DWORD(INT_TO_UINT(INDEX - 1) * SIZEOF(Motion_Object));
    Off := ptr_MotionObj^.Off();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Action Name="ACT_Halt" Id="{39e232ab-6ebc-4ec0-af7e-c3ba534cc123}" FolderPath="HMI Actions\">
      <Implementation>
        <ST><![CDATA[CASE THIS^.Halt(i) OF 
Motion_FunctionResult.MOTION_UNKNOWN_AXIS:
	HmiToPlc^.HALT := FALSE;
Motion_FunctionResult.MOTION_ERROR:
	HmiToPlc^.HALT := FALSE;
Motion_FunctionResult.MOTION_OK:
	HmiToPlc^.HALT := FALSE;
Motion_FunctionResult.MOTION_COMMAND_ABORTED:
	HmiToPlc^.HALT := FALSE;
Motion_FunctionResult.MOTION_BUSY:
	;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_MoveToPosition" Id="{40847845-e28a-467f-8c2b-007d9c73cf9b}" FolderPath="HMI Actions\">
      <Implementation>
        <ST><![CDATA[CASE MoveToPosition(i,HmiToPlc[i].TARGET_POSITION,HmiToPlc[i].TARGET_VELOCITY,HmiToPlc[i].TARGET_ACCELERATION,HmiToPlc[i].TARGET_DECELERATION,HmiToPlc[i].TARGET_JERK) OF
Motion_FunctionResult.MOTION_UNKNOWN_AXIS:
	HmiToPlc^.MOVE_ABS := FALSE;
Motion_FunctionResult.MOTION_COMMAND_ABORTED: 
	HmiToPlc^.MOVE_ABS := FALSE;
Motion_FunctionResult.MOTION_ERROR:
	HmiToPlc^.MOVE_ABS := FALSE;
Motion_FunctionResult.MOTION_BUSY: 
	;
Motion_FunctionResult.MOTION_OK:
	HmiToPlc^.MOVE_ABS := FALSE;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Property Name="Count" Id="{459cb5a1-6ab5-4653-9f1f-4943f3702408}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC Count : INT]]></Declaration>
      <Set Name="Set" Id="{6fb218ec-b5b3-46d4-afd0-a81260142c21}">
        <Declaration><![CDATA[PUBLIC 
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF COUNT > 0 THEN
	AXIS_COUNT := COUNT;
END_IF]]></ST>
        </Implementation>
      </Set>
      <Get Name="Get" Id="{9be2d030-51e7-4e34-80b7-5636315565bf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[COUNT := AXIS_COUNT;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MoveToPosition" Id="{4b4bad53-575d-4566-847b-5df400e707ed}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC MoveToPosition : Motion_FunctionResult
VAR_INPUT
	INDEX 			: INT;
	POSITION		: LREAL;
	VELOCITY		: LREAL;
	ACCELERATION	: LREAL;
	DECELERATION	: LREAL;
	JERK			: LREAL;
END_VAR
VAR
	ptr_MotionObj : POINTER TO Motion_Object;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF INDEX > AXIS_COUNT OR INDEX < 1 AND VELOCITY <= 0 THEN 
	MoveToPosition := Motion_FunctionResult.MOTION_UNKNOWN_AXIS;
ELSE
	ptr_MotionObj := Axis_Object + INT_TO_DWORD(INT_TO_UINT(INDEX - 1) * SIZEOF(Motion_Object));
    MoveToPosition := ptr_MotionObj^.MoveToPosition(POSITION,VELOCITY,ACCELERATION,DECELERATION,JERK);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="PlcToHmi_Address" Id="{4f554a56-7ed4-4543-845a-974db235ce2c}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PlcToHmi_Address : POINTER TO Motion_PlcToHmi
]]></Declaration>
      <Set Name="Set" Id="{eafc9df8-a304-4032-a888-ce6beb82e774}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PlcToHmi := PlcToHmi_Address;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Action Name="ACT_Off" Id="{5bdb5604-b204-4401-92fa-0d357435d921}" FolderPath="HMI Actions\">
      <Implementation>
        <ST><![CDATA[Off(i);]]></ST>
      </Implementation>
    </Action>
    <Method Name="Halt" Id="{6989ff12-21aa-479d-ad23-23232d5ecada}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC Halt : Motion_FunctionResult
VAR_INPUT
	INDEX : INT;
END_VAR
VAR
	ptr_MotionObj : POINTER TO Motion_Object;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF INDEX > AXIS_COUNT OR INDEX < 1 THEN 
	Halt := Motion_FunctionResult.MOTION_UNKNOWN_AXIS;
ELSE
	ptr_MotionObj := Axis_Object + INT_TO_DWORD(INT_TO_UINT(INDEX -1) * SIZEOF(Motion_Object));
    Halt := ptr_MotionObj^.Halt();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Action Name="ACT_MoveByDistance" Id="{7d58b39d-b312-4669-b3d1-c2d6a9066f91}" FolderPath="HMI Actions\">
      <Implementation>
        <ST><![CDATA[CASE THIS^.MoveByDistance(i,HmiToPlc[i].TARGET_POSITION,HmiToPlc[i].TARGET_VELOCITY,HmiToPlc[i].TARGET_ACCELERATION,HmiToPlc[i].TARGET_DECELERATION,HmiToPlc[i].TARGET_JERK) OF
Motion_FunctionResult.MOTION_UNKNOWN_AXIS:
	HmiToPlc^.MOVE_REL := FALSE;
Motion_FunctionResult.MOTION_COMMAND_ABORTED: 
	HmiToPlc^.MOVE_REL := FALSE;
Motion_FunctionResult.MOTION_ERROR:
	HmiToPlc^.MOVE_REL := FALSE;
Motion_FunctionResult.MOTION_BUSY: 
	;
Motion_FunctionResult.MOTION_OK:
	HmiToPlc^.MOVE_REL := FALSE;
END_CASE
			]]></ST>
      </Implementation>
    </Action>
    <Method Name="HmiMode" Id="{8518e72e-9841-4325-a812-a953b639b662}" FolderPath="Methods\">
      <Declaration><![CDATA[{attribute 'object_name' := 'HmiMode'}
METHOD HmiMode
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO AXIS_COUNT BY 1 DO
	ptrAxisObj := AXIS_Object + ((i-1) * SIZEOF(Motion_Object)); 
	ptrPlcToHmi := PlcToHmi + ((i-1) * SIZEOF(Motion_PlcToHmi)); 
	ptrHmiToPlc := HmiToPlc + ((i-1) * SIZEOF(Motion_HmiToPlc)); 
	ACT_UpdateStatus();
	IF HmiToPlc^.OFF THEN
		ACT_Off();
	ELSIF HmiToPlc^.ON THEN 
		ACT_On();
	END_IF
	IF HmiToPlc^.RESET THEN 
		ACT_Reset();
	END_IF
	IF NOT HmiToPlc^.JOG_MODE THEN 
		THIS^.Jog_Stop(i);
		IF HmiToPlc^.HALT THEN 
			ACT_Halt();
		ELSIF HmiToPlc^.MOVE_ABS THEN
			ACT_MoveToPosition();
		END_IF
		IF HmiToPlc^.MOVE_REL THEN
			ACT_MoveByDistance();
		END_IF
	ELSE
		ACT_Jog();
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Jog_Start" Id="{857d1325-691b-4e71-89f9-5cc1b73fa800}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC Jog_Start : Motion_FunctionResult
VAR_INPUT
	INDEX		: INT;
	REVERSE		: BOOL := FALSE;
	FAST_MODE	: BOOL := FALSE;
END_VAR
VAR
	ptr_MotionObj : POINTER TO Motion_Object;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF INDEX > AXIS_COUNT OR INDEX < 1 THEN 
	Jog_Start := Motion_FunctionResult.MOTION_UNKNOWN_AXIS;
ELSE
	ptr_MotionObj := Axis_Object + INT_TO_DWORD(INT_TO_UINT(INDEX -1) * SIZEOF(Motion_Object));
    Jog_Start := ptr_MotionObj^.Jog_Start(REVERSE,FAST_MODE);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Action Name="ACT_Reset" Id="{a7a36296-4bd3-4c04-bfcc-ad271ca28fe6}" FolderPath="HMI Actions\">
      <Implementation>
        <ST><![CDATA[IF Reset(i) = Motion_FunctionResult.MOTION_OK THEN
	HmiToPlc^.RESET := FALSE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Method Name="MoveByDistance" Id="{b7b49934-4930-4ea2-b772-a6e74f151dd6}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC MoveByDistance : Motion_FunctionResult
VAR_INPUT
	INDEX 			: INT;
	DISTANCE 		: LREAL;
	VELOCITY 		: LREAL;
	ACCELERATION 	: LREAL;
	DECELERATION 	: LREAL;
	JERK 			: LREAL;
END_VAR
VAR
	ptr_MotionObj : POINTER TO Motion_Object;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF INDEX > AXIS_COUNT OR INDEX < 1 AND VELOCITY <= 0 THEN 
	MoveByDistance := Motion_FunctionResult.MOTION_UNKNOWN_AXIS;
ELSE
	ptr_MotionObj := Axis_Object + INT_TO_DWORD(INT_TO_UINT(INDEX - 1) * SIZEOF(Motion_Object));
    MoveByDistance := ptr_MotionObj^.MoveByDistance(DISTANCE,VELOCITY,ACCELERATION,DECELERATION,JERK);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Action Name="ACT_Jog" Id="{cc0383b4-9148-4bf0-9c5a-f7313178b54b}" FolderPath="HMI Actions\">
      <Implementation>
        <ST><![CDATA[IF HmiToPlc^.JOG_FW_FAST THEN
	Jog_Start(i, FALSE, TRUE);
ELSIF HmiToPlc^.JOG_FW_SLOW THEN
	Jog_Start(i, FALSE, FALSE);
ELSIF HmiToPlc^.JOG_BW_FAST THEN
	Jog_Start(i, TRUE, TRUE);
ELSIF HmiToPlc^.JOG_BW_SLOW THEN
	Jog_Start(i, TRUE, FALSE);
ELSE
	Jog_Stop(i);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Method Name="On" Id="{d7c9e2a6-ab50-4fb9-bb77-ce0d39e7247b}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD On : Motion_FunctionResult
VAR_INPUT
	INDEX : INT;
	ENABLE_FW 	: BOOL;
	ENABLE_BW	: BOOL;
	OVERRIDE	: LREAL;
END_VAR
VAR
	ptr_MotionObj : POINTER TO Motion_Object;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF INDEX > AXIS_COUNT OR INDEX < 1 THEN 
	On := Motion_FunctionResult.MOTION_UNKNOWN_AXIS;
ELSE
	ptr_MotionObj := Axis_Object + INT_TO_DWORD(INT_TO_UINT(INDEX - 1) * SIZEOF(Motion_Object));
    On := ptr_MotionObj^.On(ENABLE_FW,ENABLE_BW,OVERRIDE);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{e126d8bd-3570-40c3-9468-28dd8d3340a4}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC Reset : Motion_FunctionResult
VAR_INPUT
	INDEX :INT;
END_VAR
VAR
	ptr_MotionObj : POINTER TO Motion_Object;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF INDEX > AXIS_COUNT OR INDEX < 1 THEN 
	Reset := Motion_FunctionResult.MOTION_UNKNOWN_AXIS;
ELSE
	ptr_MotionObj := Axis_Object + INT_TO_DWORD(INT_TO_UINT(INDEX - 1) * SIZEOF(Motion_Object));
    Reset := ptr_MotionObj^.Reset();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Action Name="ACT_UpdateStatus" Id="{fc19d8f7-7aab-443d-a6b0-6c271a3d11f7}" FolderPath="HMI Actions\">
      <Implementation>
        <ST><![CDATA[ptrPlcToHmi^ := ptrAxisObj^.ToHmi;]]></ST>
      </Implementation>
    </Action>
    <Property Name="AXIS" Id="{fd24b662-ad51-4b71-a65c-ddcefcbcb58f}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY AXIS : POINTER TO Motion_Object
]]></Declaration>
      <Set Name="Set" Id="{202590d2-eb4f-4c08-b713-480e513dea0a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AXIS_Object := AXIS;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>