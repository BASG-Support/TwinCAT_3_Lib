<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.36">
  <POU Name="Interpolate" Id="{b34746b8-a48f-4136-89a7-4c25cf4a57da}" SpecialFunc="None">
    <Declaration><![CDATA[(*
	2015 - 06 -26:	
		A very basic type of linear interpolation. No gearing, just a simple calculation and simultaneous move absolute position
*)
FUNCTION_BLOCK Interpolate EXTENDS MotionControl
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	AXISGROUP	: ARRAY [1..MAX_AXIS_GROUPS] OF Motion_AxisGroup;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[;]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{a74d0231-eaf2-4812-b485-b0a95658117b}" />
    <Property Name="AxisGroup_Count" Id="{9f93d7b8-c6c0-420b-b549-25dfd1d07367}">
      <Declaration><![CDATA[PROPERTY AxisGroup_Count : INT]]></Declaration>
      <Get Name="Get" Id="{6c4c1b83-d2cd-4270-b6f4-b61728b59c66}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AXISGROUP_Count := MAX_AXIS_GROUPS;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Set_AxisGroup" Id="{ab6dcdb3-bc01-4bb0-a35c-f32c7165dec7}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC Set_AxisGroup : Motion_FunctionResult
VAR_INPUT
	AXIS_GROUP_INDEX	: INT;
	X_AXIS_INDEX		: INT;
	Y_AXIS_INDEX		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF AXIS_GROUP_INDEX < 1 OR AXIS_GROUP_INDEX > MAX_AXIS_GROUPS THEN
	Set_AxisGroup := Motion_FunctionResult.MOTION_UNKNOWN_AXIS_GROUP;
ELSIF X_AXIS_INDEX < 1 OR X_AXIS_INDEX > MAX_AXES THEN
	Set_AxisGroup := Motion_FunctionResult.MOTION_UNKNOWN_AXIS;
ELSIF Y_AXIS_INDEX < 1 OR Y_AXIS_INDEX > MAX_AXES THEN
	Set_AxisGroup := Motion_FunctionResult.MOTION_UNKNOWN_AXIS;
ELSIF X_AXIS_INDEX = Y_AXIS_INDEX THEN
	Set_AxisGroup := Motion_FunctionResult.MOTION_UNKNOWN_SAME_AXIS_IN_GROUP;
ELSE
	AXISGROUP[AXIS_GROUP_INDEX].X_AXIS := X_AXIS_INDEX;
	AXISGROUP[AXIS_GROUP_INDEX].Y_AXIS := Y_AXIS_INDEX;
	AXISGROUP[AXIS_GROUP_INDEX].STATE := -10;
	Set_AxisGroup := Motion_FunctionResult.MOTION_OK;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="LinearInterpolate" Id="{eee2ac97-89df-432a-bc26-8b1b695c1981}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC LinearInterpolate : Motion_FunctionResult
VAR_INPUT
	GROUP 			: INT;
	TO_X_POSITION 	: LREAL;
	TO_Y_POSITION 	: LREAL;
	VELOCITY		: LREAL;
END_VAR
VAR
	delta_x : LREAL;
	delta_y : LREAL;
	delta_t : LREAL;
	distance: LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GROUP < 1 OR GROUP > MAX_AXIS_GROUPS THEN
	LinearInterpolate := Motion_FunctionResult.MOTION_UNKNOWN_AXIS_GROUP;
ELSIF AXISGROUP[GROUP].X_AXIS < 1 OR AXISGROUP[GROUP].X_AXIS > MAX_AXES THEN
	LinearInterpolate := Motion_FunctionResult.MOTION_UNKNOWN_AXIS;
ELSIF AXISGROUP[GROUP].Y_AXIS < 1 OR AXISGROUP[GROUP].Y_AXIS > MAX_AXES THEN
	LinearInterpolate := Motion_FunctionResult.MOTION_UNKNOWN_AXIS;
ELSIF AXISGROUP[GROUP].X_AXIS = AXISGROUP[GROUP].Y_AXIS THEN
	LinearInterpolate := Motion_FunctionResult.MOTION_UNKNOWN_SAME_AXIS_IN_GROUP;
ELSE
	CASE AXISGROUP[GROUP].STATE OF
	-10:
		delta_x := TO_X_POSITION - AXIS[AXISGROUP[GROUP].X_AXIS].AXIS.NcToPlc.ActPos;
		delta_y := TO_Y_POSITION - AXIS[AXISGROUP[GROUP].Y_AXIS].AXIS.NcToPlc.ActPos;
		distance:= SQRT((delta_x*delta_x) + (delta_y*delta_y));
		delta_t := distance/VELOCITY;
		AXISGROUP[GROUP].V_X := delta_x/delta_t;
		AXISGROUP[GROUP].V_Y := delta_y/delta_t;
		AXISGROUP[GROUP].STATE := 10;
		AXISGROUP[GROUP].X_DONE := FALSE;
		AXISGROUP[GROUP].Y_DONE := FALSE;
		LinearInterpolate := Motion_FunctionResult.MOTION_BUSY;
		
	10:
		IF NOT AXISGROUP[GROUP].X_DONE THEN 
			IF MoveToPosition(AXISGROUP[GROUP].X_AXIS,TO_X_POSITION,ABS(AXISGROUP[GROUP].V_X),0,0,0) = Motion_FunctionResult.MOTION_OK THEN 
				AXISGROUP[GROUP].X_DONE := TRUE;
			END_IF
		END_IF
		IF NOT AXISGROUP[GROUP].Y_DONE THEN 
			IF MoveToPosition(AXISGROUP[GROUP].Y_AXIS,TO_Y_POSITION,ABS(AXISGROUP[GROUP].V_Y),0,0,0) = Motion_FunctionResult.MOTION_OK THEN
				AXISGROUP[GROUP].Y_DONE := TRUE;
			END_IF
		END_IF
		IF AXISGROUP[GROUP].X_DONE AND AXISGROUP[GROUP].Y_DONE THEN
			AXISGROUP[GROUP].STATE := 20;
		ELSE
			LinearInterpolate := Motion_FunctionResult.MOTION_BUSY;
		END_IF
	20:
		AXISGROUP[GROUP].STATE := -10;
		AXISGROUP[GROUP].X_DONE := FALSE;
		AXISGROUP[GROUP].Y_DONE := FALSE;
		LinearInterpolate := Motion_FunctionResult.MOTION_OK;
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>