<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.3">
  <POU Name="M_ACTUATION" Id="{f52964a8-8eee-4cd2-9a3a-11dcd6b2c429}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK M_ACTUATION IMPLEMENTS IFC_ACTUATION
VAR_INPUT
END_VAR
VAR_OUTPUT
	STATE : E_ACTUATIONSTATE;
END_VAR
VAR	
	AXIS : S_ACTUATIONDATA;
	
	MOTION_ACCELERATION : LREAL := 0;
	MOTION_DECELERATION : LREAL := 0;
	MOTION_JERK 		: LREAL := 0;
	
	_PROBEPOSITION	: LREAL;
	_PROBEDATA		: MC_TouchProbeRecordedData;
	_FBTPROBE		: MC_TOUCHPROBE;
	_FBTPROBE_ABORT	: MC_ABORTTRIGGER;
	
	MANUAL_FORWARD 	: BOOL;
	MANUAL_BACKWARD : BOOL;
	_FBPOWER 		: MC_POWER;
	_FBRESET		: MC_RESET;
	_FBHALT			: MC_HALT;
	_FBHOME			: MC_HOME;
	_FBJOG			: MC_JOG;
	_FBMOVEABS		: MC_MOVEABSOLUTE;
	_FBMOVEREL		: MC_MOVERELATIVE;
	_FBMOVEVEL		: MC_MOVEVELOCITY;
	
	SETPOINT_POSITION 		: LREAL;
	SETPOINT_VELOCITY 		: LREAL;
	SETPOINT_DIRECTION		: DINT;
	
	_FBEXTEN		: MC_ExtSetPointGenEnable;
	_FBEXTDN		: MC_ExtSetPointGenDisable;
	//_FBEXTFEED		: MC_ExtSetPointGenFeed;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_FBPOWER.Enable_Positive := (NOT(AXIS.HW_POT XOR AXIS.LIMITS_INVERTED)) OR DISABLE_LIMITS;
_FBPOWER.Enable_Negative := (NOT(AXIS.HW_NOT XOR AXIS.LIMITS_INVERTED)) OR DISABLE_LIMITS;
_FBPOWER(Axis:= AXIS.NC_INTERFACE);

CASE STATE OF 
	E_ACTUATIONSTATE.E_MANUAL_ACTUATION:
		_FBJOG(
			Axis:= AXIS.NC_INTERFACE, 
			JogForward:= MANUAL_FORWARD AND ENABLE, 
			JogBackwards:= MANUAL_BACKWARD AND ENABLE, 
			Mode:= MC_JOGMODE_CONTINOUS, 
			Velocity:= , 
			Acceleration:= ACCELERATION, 
			Deceleration:= DECELERATION, 
			Jerk:= JERK ); 
	ELSE
		_FBJOG(
			Axis:= AXIS.NC_INTERFACE, 
			JogForward:= FALSE, 
			JogBackwards:= FALSE );
END_CASE
CASE STATE OF 
	E_ACTUATIONSTATE.E_SETPOINT_ACTUATION_ACTIVATED:
		AXIS.NC_INTERFACE.PlcToNc.ExtSetPos := SETPOINT_POSITION;
		AXIS.NC_INTERFACE.PlcToNc.ExtSetVelo := SETPOINT_VELOCITY;
		AXIS.NC_INTERFACE.PlcToNc.ExtSetDirection := SETPOINT_DIRECTION;
	ELSE
		;
END_CASE]]></ST>
    </Implementation>
    <Folder Name="METHODS" Id="{9c2db27e-2e54-4d7e-b609-3c7cdfbcb43e}">
      <Folder Name="External Set Point" Id="{2514c741-d08e-4e7c-8408-1b9eb91e2e9d}" />
      <Folder Name="PTP" Id="{e198e3f8-4c8b-4a8d-b248-d794cac8db13}" />
      <Folder Name="Touch Probe" Id="{506893ea-8b66-4eda-8676-ef1b0297162c}" />
    </Folder>
    <Folder Name="PROPERTIES" Id="{4c241c02-cb9a-4e84-953a-420764ffe0d9}">
      <Folder Name="Dynamics" Id="{1b4b4a94-0e1a-4788-a7ab-c493050ba69b}" />
      <Folder Name="Energise" Id="{0c28a707-0cbd-48d0-afe5-70a4ac54fd89}" />
      <Folder Name="Error" Id="{052571f6-15d2-4637-82e4-f6659000ac5e}" />
      <Folder Name="External Set Point" Id="{423a9716-7aa2-42b6-b79e-7ed684aae4f1}" />
      <Folder Name="Homing" Id="{0198463f-f32f-4311-bcf4-9808c5b470a8}" />
      <Folder Name="Info" Id="{250d0032-38b0-4e70-837e-2a41655124ff}" />
      <Folder Name="Limits" Id="{85e0cb48-41d0-4a93-a223-a87c436f94e1}" />
      <Folder Name="Manual Movement" Id="{b20509f4-bef1-4add-9d46-a3099dca2078}" />
    </Folder>
    <Property Name="ACCELERATION" Id="{37497f85-2673-4d26-9a02-30308bd9ca25}" FolderPath="PROPERTIES\Dynamics\">
      <Declaration><![CDATA[PROPERTY ACCELERATION : LREAL]]></Declaration>
      <Get Name="Get" Id="{c6f7c6d1-9725-4ced-a3c5-d109d1047f9a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ACCELERATION := MOTION_ACCELERATION;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{0194ea26-0155-4cf0-a9af-14045306168a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MOTION_ACCELERATION := ABS(ACCELERATION);]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ACTIVATE_EXTERNAL_SETPOINT" Id="{6cd2fe24-9b53-49c8-9ab3-913343cea959}" FolderPath="METHODS\External Set Point\">
      <Declaration><![CDATA[METHOD ACTIVATE_EXTERNAL_SETPOINT : DINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE STATE OF 
	E_ACTUATIONSTATE.E_SETPOINT_ACTUATION:
		_FBEXTEN(
			Axis:= AXIS.NC_INTERFACE, 
			Execute:= TRUE, 
			Position:= , 
			PositionType:= POSITIONTYPE_ABSOLUTE );
		IF _FBEXTEN.Error THEN
			_FBEXTEN(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE );
			STATE := E_ACTUATIONSTATE.E_SETPOINT_ACTUATION;
			ACTIVATE_EXTERNAL_SETPOINT := 1;
			RETURN;
		ELSIF _FBEXTEN.Done THEN
			_FBEXTEN(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE );
			STATE := E_ACTUATIONSTATE.E_SETPOINT_ACTUATION_ACTIVATED;
			ACTIVATE_EXTERNAL_SETPOINT := -1;
			RETURN;
		ELSE
			STATE := E_ACTUATIONSTATE.E_SETPOINT_ACTUATION;
			ACTIVATE_EXTERNAL_SETPOINT := 0;
			RETURN;
		END_IF
	ELSE 
		ACTIVATE_EXTERNAL_SETPOINT := 99;
		RETURN;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ACTIVATE_TOUCHPROBE" Id="{77a7193e-dfe1-404c-b132-8af079279d84}" FolderPath="METHODS\Touch Probe\">
      <Declaration><![CDATA[METHOD ACTIVATE_TOUCHPROBE : DINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_FBTPROBE(
	Axis:= AXIS.NC_INTERFACE, 
	TriggerInput:= AXIS.PROBE, 
	Execute:= TRUE, 
	WindowOnly:= FALSE, 
	FirstPosition:= , 
	LastPosition:= , 
	Done=> , 
	Busy=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> , 
	RecordedPosition=> , 
	RecordedData=> );
IF _FBTPROBE.Error OR _FBTPROBE.CommandAborted THEN
	_FBTPROBE(
		Axis:= AXIS.NC_INTERFACE, 
		TriggerInput:= AXIS.PROBE, 
		Execute:= FALSE );
	ACTIVATE_TOUCHPROBE := 1;
	RETURN;
ELSIF _FBTPROBE.Done THEN
	_FBTPROBE(
		Axis:= AXIS.NC_INTERFACE, 
		TriggerInput:= AXIS.PROBE, 
		Execute:= FALSE );
	_PROBEDATA := _FBTPROBE.RecordedData;
	_PROBEPOSITION := _FBTPROBE.RecordedPosition;
	ACTIVATE_TOUCHPROBE := -1;
	RETURN;
ELSE
	_FBTPROBE(
		Axis:= AXIS.NC_INTERFACE, 
		TriggerInput:= AXIS.PROBE, 
		Execute:= FALSE );
	ACTIVATE_TOUCHPROBE := 0;
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="AT_NEGATIVE_LIMIT" Id="{f33f4228-9ebe-44e7-8dd8-685f2b47d72b}" FolderPath="PROPERTIES\Limits\">
      <Declaration><![CDATA[PROPERTY AT_NEGATIVE_LIMIT : BOOL]]></Declaration>
      <Get Name="Get" Id="{c26ca74a-4c5b-4660-ba01-3556887a6e88}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AT_NEGATIVE_LIMIT := AXIS.HW_NOT;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AT_POSITIVE_LIMIT" Id="{da934be6-c138-48ca-b419-a2f7c2bb9f77}" FolderPath="PROPERTIES\Limits\">
      <Declaration><![CDATA[PROPERTY AT_POSITIVE_LIMIT : BOOL]]></Declaration>
      <Get Name="Get" Id="{a0910071-6fb0-4a4a-a520-59e8aabd2565}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AT_POSITIVE_LIMIT := AXIS.HW_POT;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AXIS_ERROR" Id="{45f6258f-d2e2-4c04-8ce3-8b581d133926}" FolderPath="PROPERTIES\Error\">
      <Declaration><![CDATA[PROPERTY AXIS_ERROR : BOOL]]></Declaration>
      <Get Name="Get" Id="{1e36efa1-d54f-4d6a-a4c4-e88c504359a0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AXIS.NC_INTERFACE.ReadStatus();
AXIS_ERROR := AXIS.NC_INTERFACE.Status.Error;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AXIS_ERROR_ID" Id="{8d818d24-e1b4-4687-974c-c1ea560a22fe}" FolderPath="PROPERTIES\Error\">
      <Declaration><![CDATA[PROPERTY AXIS_ERROR_ID : UDINT]]></Declaration>
      <Get Name="Get" Id="{fee2302c-cbeb-4cdb-b497-1601f97216ab}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AXIS_ERROR_ID := AXIS.NC_INTERFACE.NcToPlc.ErrorCode;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CALIBRATE_AT_LIMIT" Id="{638b4eeb-7831-49b6-b210-4b6bbe39198d}" FolderPath="PROPERTIES\Homing\">
      <Declaration><![CDATA[PROPERTY CALIBRATE_AT_LIMIT : BOOL]]></Declaration>
      <Get Name="Get" Id="{148198c6-e913-4fc6-88f5-a88b8909801c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CALIBRATE_AT_LIMIT := AXIS.CALIBRATE_AT_LIMIT;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9fda6d35-d4dc-41e8-86e1-a1f39eeddd11}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AXIS.CALIBRATE_AT_LIMIT := CALIBRATE_AT_LIMIT;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="CALIBRATE_TO_NEGATIVE" Id="{65a1cacf-d626-495f-8baf-e87d032071ad}" FolderPath="PROPERTIES\Homing\">
      <Declaration><![CDATA[PROPERTY CALIBRATE_TO_NEGATIVE : BOOL]]></Declaration>
      <Get Name="Get" Id="{4622490b-c3ca-4687-8fb4-243940a6ea5e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CALIBRATE_TO_NEGATIVE := AXIS.CALIBRATE_AT_MINUS;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{aa6baf8a-1f8c-42d1-93db-4a8bc44c5de7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AXIS.CALIBRATE_AT_MINUS := CALIBRATE_TO_NEGATIVE; ]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="DEACTIVATE_EXTERNAL_SETPOINT" Id="{672b26e5-2446-40a9-9f2c-6e0330c96b12}" FolderPath="METHODS\External Set Point\">
      <Declaration><![CDATA[METHOD DEACTIVATE_EXTERNAL_SETPOINT : DINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE STATE OF 
	E_ACTUATIONSTATE.E_SETPOINT_ACTUATION_ACTIVATED:
		_FBEXTDN(
			Axis:= AXIS.NC_INTERFACE, 
			Execute:= TRUE );
		IF _FBEXTDN.Error THEN
			_FBEXTDN(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE );
			STATE := E_ACTUATIONSTATE.E_SETPOINT_ACTUATION_ACTIVATED;
			DEACTIVATE_EXTERNAL_SETPOINT := 1;
			RETURN;
		ELSIF _FBEXTDN.Done THEN
			_FBEXTDN(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE );
			STATE := E_ACTUATIONSTATE.E_SETPOINT_ACTUATION;
			DEACTIVATE_EXTERNAL_SETPOINT := -1;
			RETURN;
		ELSE
			STATE := E_ACTUATIONSTATE.E_SETPOINT_ACTUATION_ACTIVATED;
			DEACTIVATE_EXTERNAL_SETPOINT := 0;
			RETURN;
		END_IF
	ELSE 
		DEACTIVATE_EXTERNAL_SETPOINT := 99;
		RETURN;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DEACTIVATE_TOUCHPROBE" Id="{8ec54145-2166-4726-9a0d-a17e570bf34c}" FolderPath="METHODS\Touch Probe\">
      <Declaration><![CDATA[METHOD DEACTIVATE_TOUCHPROBE : DINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_FBTPROBE_ABORT(
	Axis:= AXIS.NC_INTERFACE, 
	TriggerInput:= AXIS.PROBE, 
	Execute:= TRUE );
IF _FBTPROBE_ABORT.Error THEN
	_FBTPROBE_ABORT(
		Axis:= AXIS.NC_INTERFACE, 
		TriggerInput:= AXIS.PROBE, 
		Execute:= FALSE );
	DEACTIVATE_TOUCHPROBE := 1;
	RETURN;
ELSIF _FBTPROBE_ABORT.DONE THEN
	_FBTPROBE_ABORT(
		Axis:= AXIS.NC_INTERFACE, 
		TriggerInput:= AXIS.PROBE, 
		Execute:= FALSE );
	DEACTIVATE_TOUCHPROBE := -1;
	RETURN; 
ELSE
	DEACTIVATE_TOUCHPROBE := 0;
	RETURN; 
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="DECELERATION" Id="{4ff0eb13-9280-494c-8cec-d7dea0496e47}" FolderPath="PROPERTIES\Dynamics\">
      <Declaration><![CDATA[PROPERTY DECELERATION : LREAL]]></Declaration>
      <Get Name="Get" Id="{4e25f3ca-21c7-4c83-a12e-8e28369f63ca}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DECELERATION := MOTION_DECELERATION;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e806be47-144a-4971-99ad-9d66802ae450}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MOTION_DECELERATION := ABS(DECELERATION);]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="DISABLE_LIMITS" Id="{88a54be5-1256-453d-8f63-a4fea2811ed3}" FolderPath="PROPERTIES\Limits\">
      <Declaration><![CDATA[PROPERTY DISABLE_LIMITS : BOOL]]></Declaration>
      <Get Name="Get" Id="{47316c77-a391-4630-9722-5a8352a26bfb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DISABLE_LIMITS := AXIS.LIMITS_DISABLED;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{da697a76-88e8-4399-8dec-605a5ea92ca0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AXIS.LIMITS_DISABLED := DISABLE_LIMITS;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ENABLE" Id="{af468660-e2fd-4dbe-ab20-61b761bda61b}" FolderPath="PROPERTIES\Energise\">
      <Declaration><![CDATA[PROPERTY ENABLE : BOOL]]></Declaration>
      <Get Name="Get" Id="{fe46dda4-6633-4271-a52b-0c5c5e7d5e7a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ENABLE := _FBPOWER.Status;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a80f58d2-3081-42eb-8fed-ff2dcde7112f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_FBPOWER.Enable := ENABLE;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="HALT" Id="{008b2618-2d20-42b4-ae76-4c45fde89526}" FolderPath="METHODS\">
      <Declaration><![CDATA[METHOD HALT : DINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.JOG_FORWARD := FALSE;
THIS^.JOG_BACKWARD := FALSE;

_FBHALT(
	Axis:= AXIS.NC_INTERFACE, 
	Execute:= TRUE, 
	Deceleration:= DECELERATION, 
	Jerk:= JERK );
IF _FBHALT.Error THEN
	_FBHALT(
		Axis:= AXIS.NC_INTERFACE, 
		Execute:= FALSE );
	HALT := 1;
	RETURN;
ELSIF _FBHALT.CommandAborted THEN
	_FBHALT(
		Axis:= AXIS.NC_INTERFACE, 
		Execute:= FALSE );
	HALT := 2;
	RETURN;
ELSIF _FBHALT.Done THEN
	_FBHALT(
		Axis:= AXIS.NC_INTERFACE, 
		Execute:= FALSE );
	HALT := -1;
	RETURN;
ELSE
	HALT := 0;
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="HARDWARE_ERROR_CODE" Id="{7d0a5f75-8977-4833-8659-f456e37e6df9}" FolderPath="PROPERTIES\Error\">
      <Declaration><![CDATA[PROPERTY HARDWARE_ERROR_CODE : UDINT]]></Declaration>
      <Get Name="Get" Id="{b0ca326a-1ba1-4b63-8c86-60414219b5ce}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HARDWARE_ERROR_CODE := AXIS.HW_ERR;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HAS_JOB" Id="{ec234489-4f94-490b-8207-ada345224f96}" FolderPath="PROPERTIES\Info\">
      <Declaration><![CDATA[PROPERTY HAS_JOB : BOOL]]></Declaration>
      <Get Name="Get" Id="{6d805dc0-f591-4bf7-b414-bf0bf5d888ed}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AXIS.NC_INTERFACE.ReadStatus();
HAS_JOB := AXIS.NC_INTERFACE.Status.HasJob;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="HOME" Id="{ce7163f6-87a0-46e0-a352-23d8bea6fead}" FolderPath="METHODS\PTP\">
      <Declaration><![CDATA[METHOD HOME : DINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE STATE OF 
	E_ACTUATIONSTATE.E_PTP_ACTUATION, E_ACTUATIONSTATE.E_PTP_ACTUATION_EXECUTING:
		DISABLE_LIMITS := TRUE;
		IF AXIS.CALIBRATE_AT_LIMIT THEN
			IF AXIS.CALIBRATE_AT_MINUS THEN
				_FBHOME.bCalibrationCam := AXIS.HW_NOT XOR AXIS.LIMITS_INVERTED;
			ELSE
				_FBHOME.bCalibrationCam := AXIS.HW_POT XOR AXIS.LIMITS_INVERTED;
			END_IF
		ELSE
			_FBHOME.bCalibrationCam := AXIS.HW_HOME XOR AXIS.HW_HOME_INVERTED;
		END_IF
		_FBHOME(
			Axis:= AXIS.NC_INTERFACE, 
			Execute:= TRUE, 
			Position:= , 
			HomingMode:= MC_DEFAULTHOMING, 
			bCalibrationCam:= );
		IF _FBHOME.Error THEN
			_FBHOME(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE);
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			DISABLE_LIMITS := FALSE;
			HOME := 1;
			RETURN;
		ELSIF _FBHOME.CommandAborted THEN
			_FBHOME(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE);
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			DISABLE_LIMITS := FALSE;
			HOME := 2;
			RETURN;
		ELSIF _FBHOME.Done THEN
			_FBHOME(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE);
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			DISABLE_LIMITS := FALSE;
			HOME := -1;
			RETURN;
		ELSE
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION_EXECUTING;
			HOME := 0;
			RETURN;
		END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HOME_FORCED" Id="{10705222-c1a6-4bc3-b055-8a0a6a30927f}" FolderPath="METHODS\PTP\">
      <Declaration><![CDATA[METHOD HOME_FORCED : DINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE STATE OF 
	E_ACTUATIONSTATE.E_PTP_ACTUATION, E_ACTUATIONSTATE.E_PTP_ACTUATION_EXECUTING:
		_FBHOME(
			Axis:= AXIS.NC_INTERFACE, 
			Execute:= TRUE, 
			Position:= , 
			HomingMode:= MC_DIRECT, 
			bCalibrationCam:= );
		IF _FBHOME.Error THEN
			_FBHOME(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE);
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			HOME_FORCED := 1;
			RETURN;
		ELSIF _FBHOME.CommandAborted THEN
			_FBHOME(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE);
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			HOME_FORCED := 2;
			RETURN;
		ELSIF _FBHOME.Done THEN
			_FBHOME(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE);
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			HOME_FORCED := -1;
			RETURN;
		ELSE
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION_EXECUTING;
			HOME_FORCED := 0;
			RETURN;
		END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Property Name="ID" Id="{9a892e23-f3af-47a6-abe4-0ccecc3043ac}" FolderPath="PROPERTIES\Info\">
      <Declaration><![CDATA[PROPERTY ID : UDINT]]></Declaration>
      <Get Name="Get" Id="{f31a7061-2b1b-4772-904f-b8f810f6086d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ID := AXIS.NC_INTERFACE.NcToPlc.AxisId;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="INVERT_CALIBRATION_SIGNAL" Id="{279747a4-f426-4e1c-9226-f9ffa31d597c}" FolderPath="PROPERTIES\Homing\">
      <Declaration><![CDATA[PROPERTY INVERT_CALIBRATION_SIGNAL : BOOL]]></Declaration>
      <Get Name="Get" Id="{2380ddf4-a8b4-4863-82a8-799ebe1bd6af}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[INVERT_CALIBRATION_SIGNAL := AXIS.HW_HOME_INVERTED;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{37f100d0-3012-4b35-8094-5eb107c20606}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AXIS.HW_HOME_INVERTED := INVERT_CALIBRATION_SIGNAL;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="INVERT_LIMITS" Id="{f831e6e6-fd28-4a88-b90b-2fda6479bddf}" FolderPath="PROPERTIES\Limits\">
      <Declaration><![CDATA[PROPERTY INVERT_LIMITS : BOOL]]></Declaration>
      <Get Name="Get" Id="{048a432b-32f0-433f-b8d0-bf11dacac017}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[INVERT_LIMITS := AXIS.LIMITS_INVERTED;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{37b2d36e-7389-4f66-bc17-35263258dd29}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AXIS.LIMITS_INVERTED := INVERT_LIMITS;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="IS_MOVING" Id="{7f4f1a27-dcf6-4740-a3d1-7284e8882959}" FolderPath="PROPERTIES\Info\">
      <Declaration><![CDATA[PROPERTY IS_MOVING : BOOL]]></Declaration>
      <Get Name="Get" Id="{7512c856-fea6-4b14-a75f-793b7c38760a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AXIS.NC_INTERFACE.ReadStatus();
IS_MOVING := AXIS.NC_INTERFACE.Status.Moving;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="JERK" Id="{71610324-a59d-4732-9484-9a2d7a79b125}" FolderPath="PROPERTIES\Dynamics\">
      <Declaration><![CDATA[PROPERTY JERK : LREAL]]></Declaration>
      <Get Name="Get" Id="{af03e16d-840e-45ca-a9c1-842c01be5b6f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[JERK := MOTION_JERK;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a0526f6d-dbea-4060-b16e-b41fa06beffd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MOTION_JERK := ABS(JERK);]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="JOG_BACKWARD" Id="{3d6bf597-648c-4cf7-a8d7-0cf9416cc916}" FolderPath="PROPERTIES\Manual Movement\">
      <Declaration><![CDATA[PROPERTY JOG_BACKWARD : BOOL]]></Declaration>
      <Set Name="Set" Id="{e026319b-2b04-448f-bc51-3b296be428b8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MANUAL_BACKWARD := JOG_BACKWARD;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="JOG_FORWARD" Id="{2cd2a744-c357-428f-ae2d-b7879aea7471}" FolderPath="PROPERTIES\Manual Movement\">
      <Declaration><![CDATA[PROPERTY JOG_FORWARD : BOOL]]></Declaration>
      <Set Name="Set" Id="{cdc3c4ec-db71-423e-9137-033c2069aeed}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MANUAL_FORWARD := JOG_FORWARD;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="JOG_VELOCITY" Id="{36f8bcf5-8f2d-4743-a7d9-0246f78b5ffa}" FolderPath="PROPERTIES\Manual Movement\">
      <Declaration><![CDATA[PROPERTY JOG_VELOCITY : LREAL]]></Declaration>
      <Get Name="Get" Id="{88cee161-f551-4808-8ac2-6b6432a204d1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[JOG_VELOCITY := _FBJOG.Velocity;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b2ec71fd-6752-4c59-9af7-566a7d15f67e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF JOG_VELOCITY > 0.0 THEN
	_FBJOG.Velocity := JOG_VELOCITY;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MODE" Id="{f9f9beb3-dc01-4394-88d0-4ecf691d1de6}" FolderPath="PROPERTIES\Info\">
      <Declaration><![CDATA[PROPERTY MODE : E_ACTUATIONSTATE]]></Declaration>
      <Get Name="Get" Id="{55eacb41-ad75-46eb-90f2-b5ee15ca2f50}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MODE := STATE;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d65cca50-5c38-4c15-964c-a3665bf9924e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CASE MODE OF
E_ACTUATIONSTATE.E_MANUAL_ACTUATION:
	CASE STATE OF 
		E_ACTUATIONSTATE.E_PTP_ACTUATION, E_ACTUATIONSTATE.E_SETPOINT_ACTUATION:
			STATE := MODE;
	END_CASE
E_ACTUATIONSTATE.E_PTP_ACTUATION:
	CASE STATE OF 
		E_ACTUATIONSTATE.E_MANUAL_ACTUATION, E_ACTUATIONSTATE.E_SETPOINT_ACTUATION:
			STATE := MODE;
	END_CASE
E_ACTUATIONSTATE.E_SETPOINT_ACTUATION:
	CASE STATE OF 
		E_ACTUATIONSTATE.E_MANUAL_ACTUATION, E_ACTUATIONSTATE.E_PTP_ACTUATION:
			STATE := MODE;
	END_CASE
END_CASE]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="MOVE_ALONG" Id="{02faa52a-e8d1-4290-95d4-db1e25db8ae0}" FolderPath="METHODS\PTP\">
      <Declaration><![CDATA[METHOD MOVE_ALONG : LREAL
VAR_INPUT
	VELOCITY	: LREAL;
	FORWARD 	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE STATE OF 
	E_ACTUATIONSTATE.E_PTP_ACTUATION, E_ACTUATIONSTATE.E_PTP_ACTUATION_EXECUTING:
		IF FORWARD THEN
			_FBMOVEVEL.Direction := 1;
		ELSE
			_FBMOVEVEL.Direction := 3;
		END_IF
		_FBMOVEVEL(
			Axis:= AXIS.NC_INTERFACE, 
			Execute:= TRUE, 
			Velocity:= VELOCITY, 
			Acceleration:= ACCELERATION, 
			Deceleration:= DECELERATION, 
			Jerk:= JERK );
		IF _FBMOVEVEL.Error THEN
			_FBMOVEVEL(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE);
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			MOVE_ALONG := 1;
			RETURN;
		ELSIF _FBMOVEVEL.CommandAborted THEN
			_FBMOVEVEL(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE);
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			MOVE_ALONG := 2;
			RETURN;
		ELSIF _FBMOVEVEL.InVelocity THEN
			_FBMOVEVEL(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE);
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			MOVE_ALONG := -1;
			RETURN;
		ELSE
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION_EXECUTING;
			MOVE_ALONG := 0;
			RETURN;
		END_IF
	ELSE
		MOVE_ALONG := 99;
		RETURN;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MOVE_BY" Id="{8b3fefce-b164-4a9f-bcef-47774b58331f}" FolderPath="METHODS\PTP\">
      <Declaration><![CDATA[METHOD MOVE_BY : DINT
VAR_INPUT
	DISTANCE : LREAL;
	VELOCITY : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE STATE OF 
	E_ACTUATIONSTATE.E_PTP_ACTUATION, E_ACTUATIONSTATE.E_PTP_ACTUATION_EXECUTING:
		_FBMOVEREL(
			Axis:= AXIS.NC_INTERFACE, 
			Execute:= TRUE, 
			Distance:= DISTANCE, 
			Velocity:= VELOCITY, 
			Acceleration:= ACCELERATION, 
			Deceleration:= DECELERATION, 
			Jerk:= JERK );
		IF _FBMOVEREL.Error THEN
			_FBMOVEREL(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE );
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			MOVE_BY := 1;
			RETURN;
		ELSIF _FBMOVEREL.CommandAborted THEN
			_FBMOVEREL(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE );
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			MOVE_BY := 2;
			RETURN;
		ELSIF _FBMOVEREL.Done THEN
			_FBMOVEREL(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE );
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			MOVE_BY := -1;
			RETURN;
		ELSE
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION_EXECUTING;
			MOVE_BY := 0;
			RETURN;
		END_IF
	ELSE
		MOVE_BY := 99;
		RETURN;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="MOVE_TO" Id="{5ee0d729-7d62-443d-bd28-41b624d66947}" FolderPath="METHODS\PTP\">
      <Declaration><![CDATA[METHOD MOVE_TO : DINT
VAR_INPUT
	POSITION : LREAL;
	VELOCITY : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE STATE OF 
	E_ACTUATIONSTATE.E_PTP_ACTUATION, E_ACTUATIONSTATE.E_PTP_ACTUATION_EXECUTING:
		_FBMOVEABS(
			Axis:= AXIS.NC_INTERFACE, 
			Execute:= TRUE, 
			Position:= POSITION, 
			Velocity:= VELOCITY, 
			Acceleration:= ACCELERATION, 
			Deceleration:= DECELERATION, 
			Jerk:= JERK );
		IF _FBMOVEABS.Error THEN
			_FBMOVEABS(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE );
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			MOVE_TO := 1;
			RETURN;
		ELSIF _FBMOVEABS.CommandAborted THEN
			_FBMOVEABS(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE );
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			MOVE_TO := 2;
			RETURN;
		ELSIF _FBMOVEABS.Done THEN
			_FBMOVEABS(
				Axis:= AXIS.NC_INTERFACE, 
				Execute:= FALSE );
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION;
			MOVE_TO := -1;
			RETURN;
		ELSE
			STATE := E_ACTUATIONSTATE.E_PTP_ACTUATION_EXECUTING;
			MOVE_TO := 0;
			RETURN;
		END_IF
	ELSE
		MOVE_TO := 99;
		RETURN;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="OVERRIDE" Id="{83d2b315-2d14-45ea-9a46-cd3dd2235c5e}" FolderPath="PROPERTIES\Energise\">
      <Declaration><![CDATA[PROPERTY OVERRIDE : LREAL]]></Declaration>
      <Get Name="Get" Id="{bb57046b-6b89-478f-8930-5800b887d37b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Override := _FBPOWER.Override;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{2c474a43-cfd8-44d1-a90e-db81dd573459}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF OVERRIDE > 100.0 THEN
	_FBPOWER.Override := 100;
ELSIF OVERRIDE < 0.0 THEN 
	_FBPOWER.Override := 0.0;
ELSE
	_FBPOWER.Override := OVERRIDE;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="POSITION" Id="{1a5563fe-c64c-4268-8795-a4dcdff8614f}" FolderPath="PROPERTIES\Info\">
      <Declaration><![CDATA[PROPERTY POSITION : LREAL]]></Declaration>
      <Get Name="Get" Id="{446795f1-754d-4b6c-a10f-b988bff48b32}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[POSITION := AXIS.NC_INTERFACE.NcToPlc.ActPos;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="RESET" Id="{8078bb31-d691-45b2-9f1b-21def022ded7}" FolderPath="METHODS\">
      <Declaration><![CDATA[METHOD RESET : DINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_FBRESET(
	Axis:= AXIS.NC_INTERFACE, 
	Execute:= TRUE );
IF _FBRESET.Error THEN
	_FBRESET(
		Axis:= AXIS.NC_INTERFACE, 
		Execute:= FALSE );
	RESET := 1;
	RETURN;
ELSIF _FBRESET.Done THEN
	_FBRESET(
		Axis:= AXIS.NC_INTERFACE, 
		Execute:= FALSE );
	RESET := -1;
	RETURN;
ELSE 
	RESET := 0;
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="SET_DIRECTION" Id="{ff34cd4e-b538-4f13-87b0-8a02259ca668}" FolderPath="PROPERTIES\External Set Point\">
      <Declaration><![CDATA[PROPERTY SET_DIRECTION : DINT]]></Declaration>
      <Set Name="Set" Id="{8e509577-7bd9-4774-9ec3-7dc47bb80c74}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF SET_DIRECTION >= 1 THEN
	SETPOINT_DIRECTION := 1;
ELSIF SET_DIRECTION <= -1 THEN
	SETPOINT_DIRECTION := -1;
ELSE
	SETPOINT_DIRECTION := 0;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="SET_POSITION" Id="{5380400c-b23e-4a19-b1bf-73d743688e48}" FolderPath="PROPERTIES\External Set Point\">
      <Declaration><![CDATA[PROPERTY SET_POSITION : LREAL]]></Declaration>
      <Set Name="Set" Id="{b7ebcf94-c7c3-40d0-b2a6-a44532024f83}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SETPOINT_POSITION := SET_POSITION;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="SET_VELOCITY" Id="{b1f95005-216f-4b71-8a38-5486334d0dc0}" FolderPath="PROPERTIES\External Set Point\">
      <Declaration><![CDATA[PROPERTY SET_VELOCITY : LREAL]]></Declaration>
      <Set Name="Set" Id="{722aeddd-00bc-4c60-a188-db01efd6d614}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SETPOINT_VELOCITY := SET_VELOCITY;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="VELOCITY" Id="{03b9cec2-c3d8-4b27-941e-44db7f8ba6f3}" FolderPath="PROPERTIES\Info\">
      <Declaration><![CDATA[PROPERTY VELOCITY : LREAL]]></Declaration>
      <Get Name="Get" Id="{f926a054-f2c9-4495-8f21-a2fa81ae06a7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[VELOCITY := AXIS.NC_INTERFACE.NcToPlc.ActVelo;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>