<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.36">
  <POU Name="Serial_StandardTask" Id="{0e9f6b66-5ba1-45c4-9000-604dce6adced}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC Serial_StandardTask IMPLEMENTS ITF_Serial_StandardTask
VAR
	objSerialChannel	: POINTER TO Serial_Channel := 0;
	Channel_Count 		: INT := 0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[;]]></ST>
    </Implementation>
    <Method Name="Set_Format" Id="{24214af8-7086-419d-abcd-35575398b3fe}">
      <Declaration><![CDATA[METHOD PUBLIC Set_Format : Serial_FunctionResult
VAR_INPUT
	CHANNEL: INT;
	PREFIX : STRING;
	SURFIX : STRING;
END_VAR
VAR
	serial_channel_pointer : POINTER TO Serial_Channel;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF CHANNEL > Channel_Count OR CHANNEL < 1 THEN
	Set_Format := Serial_FunctionResult.COM_UNKNOWN_CHANNEL;
ELSE
	serial_channel_pointer := objSerialChannel + (INT_TO_UINT(CHANNEL - 1) * SIZEOF(Serial_Channel));
	serial_channel_pointer^.PREFIX := PREFIX;
	serial_channel_pointer^.SURFIX := SURFIX;
	Set_Format := Serial_FunctionResult.NO_ERROR;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="CHANNELS" Id="{39b754f3-47be-4ec5-bdf0-524ac3dbfc20}">
      <Declaration><![CDATA[PROPERTY CHANNELS : POINTER TO Serial_Channel
]]></Declaration>
      <Set Name="Set" Id="{0b252aa6-c94a-433c-80ca-8c494ba4773f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[objSerialChannel := CHANNELS;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ReadString80" Id="{599c74cc-629d-487b-9695-5c0ac7fadda1}">
      <Declaration><![CDATA[(*
	2015-06-04	:
		The method ReadString80(INT,STRING_PTR) should be used to read a string with a length of up to 80 characters long. 
*)
METHOD PUBLIC ReadString80 : Serial_FunctionResult
VAR_INPUT
	CHANNEL 			: INT;					(*The serial communication channel*)
	RECEIVED_DATA		: POINTER TO STRING;	(*The address of the variable to store the received string*)
END_VAR
VAR 
	serial_channel_pointer : POINTER TO Serial_Channel;
	String_Data_Buffer 	: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF CHANNEL > Channel_Count OR CHANNEL < 1 THEN
	ReadString80 := Serial_FunctionResult.COM_UNKNOWN_CHANNEL;
ELSE
	serial_channel_pointer := objSerialChannel + (INT_TO_UINT(CHANNEL - 1) * SIZEOF(Serial_Channel));
	CASE serial_channel_pointer^.Read_String(ADR(String_Data_Buffer)) OF 
		Serial_FunctionResult.COM_RECEIVE_ERROR:
			ReadString80 := Serial_FunctionResult.COM_RECEIVE_ERROR;
		Serial_FunctionResult.NO_ERROR: 
			RECEIVED_DATA^ := String_Data_Buffer;
			ReadString80 := Serial_FunctionResult.NO_ERROR;
		Serial_FunctionResult.COM_NO_STRING_RECEIVED:
			ReadString80 := Serial_FunctionResult.COM_NO_STRING_RECEIVED;
		Serial_FunctionResult.Busy:	
			ReadString80 := Serial_FunctionResult.BUSY;
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SendString80" Id="{8458000a-b8ff-4701-9433-b072917b432f}">
      <Declaration><![CDATA[METHOD PUBLIC SendString80 : Serial_FunctionResult
VAR_INPUT
	CHANNEL	: INT;		(*The serial communication channel*)
	DATA	: STRING;	(*The string data to be sent to via the channel. Do not include the prefix/surfix.*)
END_VAR
VAR
	serial_channel_pointer : POINTER TO Serial_Channel;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF CHANNEL > Channel_Count OR CHANNEL < 1 THEN
	SendString80 := Serial_FunctionResult.COM_UNKNOWN_CHANNEL;
ELSE
	serial_channel_pointer := objSerialChannel + (INT_TO_UINT(CHANNEL - 1) * SIZEOF(Serial_Channel));
	CASE serial_channel_pointer^.Send_String(DATA) OF
		Serial_FunctionResult.COM_SEND_ERROR:
			SendString80 := Serial_FunctionResult.COM_SEND_ERROR;
		Serial_FunctionResult.BUSY:
			SendString80 := Serial_FunctionResult.BUSY;	
		Serial_FunctionResult.NO_ERROR:
			SendString80 := Serial_FunctionResult.NO_ERROR;			
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="COUNT" Id="{b1641b19-5ded-4215-9723-8bb1252bd95b}">
      <Declaration><![CDATA[PROPERTY COUNT : INT
]]></Declaration>
      <Set Name="Set" Id="{3e84831e-ea6a-424a-ba51-3299b164d7cd}">
        <Declaration><![CDATA[PUBLIC 
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Channel_Count := COUNT;]]></ST>
        </Implementation>
      </Set>
      <Get Name="Get" Id="{51698a01-231a-4e3a-85da-1475deeaa5d5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[COUNT := Channel_Count;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>